import argparse
import os

import models
import torch
from dataset import make_loaders
from utils import set_seed, train

# Define a mapping from string to PyTorch RNN module
RNN_MODULES = {
    "RNN": torch.nn.RNN,
    "GRU": torch.nn.GRU,
    "LSTM": torch.nn.LSTM,
}

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--device", type=str, default="cpu")
    parser.add_argument("--model", type=str, default="MalConvPlus")
    parser.add_argument("--embed_dim", type=int, default=8)
    parser.add_argument("--max_len", type=int, default=4096)
    parser.add_argument("--out_channels", type=int, default=128)
    parser.add_argument("--window_size", type=int, default=32)
    parser.add_argument("--dropout", type=float, default=0.5)
    parser.add_argument("--seed", type=int, default=42)
    parser.add_argument("--benign_dir", type=str, required=True)
    parser.add_argument("--malware_dir", type=str, required=True)
    parser.add_argument("--tag", type=str, default="exp1")
    parser.add_argument(
        "--checkpoint_dir", type=str, default="../../assets/checkpoints"
    )
    parser.add_argument("--batch_size", type=int, default=8)
    parser.add_argument("--val_size", type=float, default=0.1)
    parser.add_argument("--test_size", type=float, default=0.1)
    # Add argument for RNN module type
    parser.add_argument("--rnn_module", type=str, default="LSTM", choices=RNN_MODULES.keys())
    parser.add_argument("--hidden_size", type=int, default=128)
    parser.add_argument("--num_layers", type=int, default=2)
    parser.add_argument("--bidirectional", type=bool, default=True)
    parser.add_argument("--residual", type=bool, default=True)
    parser.add_argument("--attn_size", type=int, default=64)  # Add default attn_size for AttentionRCNN
    args = parser.parse_args()
    return args


def main(args):
    set_seed(args.seed)
    device = torch.device(args.device)
    model_cls = getattr(models, args.model)
    
    # Get the RNN module class from the string argument
    rnn_module = RNN_MODULES[args.rnn_module]

    # Pass the correct parameters based on the selected model
    if args.model == "MalConvBase":
        model = model_cls(
            embed_dim=args.embed_dim,
            out_channels=args.out_channels,
            window_size=args.window_size,
            dropout=args.dropout
        ).to(device)
    elif args.model == "MalConvPlus":
        model = model_cls(
            embed_dim=args.embed_dim,
            max_len=args.max_len,
            out_channels=args.out_channels,
            window_size=args.window_size,
            dropout=args.dropout
        ).to(device)
    elif args.model == "RCNN":
        model = model_cls(
            embed_dim=args.embed_dim,
            out_channels=args.out_channels,
            window_size=args.window_size,
            module=rnn_module,
            hidden_size=args.hidden_size,
            num_layers=args.num_layers,
            bidirectional=args.bidirectional,
            residual=args.residual,
            dropout=args.dropout
        ).to(device)
    elif args.model == "AttentionRCNN":
        model = model_cls(
            embed_dim=args.embed_dim,
            out_channels=args.out_channels,
            window_size=args.window_size,
            module=rnn_module,
            hidden_size=args.hidden_size,
            num_layers=args.num_layers,
            bidirectional=args.bidirectional,
            attn_size=args.attn_size,
            residual=args.residual,
            dropout=args.dropout
        ).to(device)

    train_loader, val_loader, _ = make_loaders(
        args.benign_dir,
        args.malware_dir,
        args.batch_size,
        args.val_size,
        args.test_size,
    )
    os.makedirs(args.checkpoint_dir, exist_ok=True)
    train(model, train_loader, val_loader, device, args.checkpoint_dir, args.tag)


if __name__ == "__main__":
    args = get_args()
    main(args)

